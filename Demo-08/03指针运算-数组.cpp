#include <stdio.h>
#include <stdlib.h>

int main0003()
{
	int arr[] = {4,7,2,10,3,6,12,1,16};
	int* p = &arr[3];

	p--;
	printf("%d\n",*p);	//res:2

	int step = p - arr;	//偏移量:从0号位到当前指针的距离
	printf("指针偏移量:%d\n",step);

	/*
	1:指针相加的结果必须指向有效的内存地址。
	如果指针相加的结果指向未定义的内存位置，就会产生野指针，导致程序错误或崩溃。

	2:指针相加的结果必须仍然指向同一块内存区域。
	如果指针相加的结果指向不同的内存区域，就会导致程序错误或崩溃

	3:指针相加的结果需要符合指针类型的语义。
	例如，如果一个指针指向一个数组，那么它可以与整数相加，但只有当结果指向该数组内的另一个元素时才有效。
	*/

	//指针一般不能*/+,因为容易野指针,因为做运算之后 不知道内存地址指向哪里
	//可以指针相减 求偏移量
	// p = p + arr; //err
	// p = p * arr; //err
	// p = p * 4;	//err
	// p = p / arr; //err

	//指针	可以相减运算,但不能指针相加,且不能`除`,`乘`,`取余`,否则有可能野指针
	//指针  可以做大小对比 `>`,`==`,`<`,`==`,`!=`
	//指针  可以做条件判断 `&&`,`||` `!`
	return 0;
}
